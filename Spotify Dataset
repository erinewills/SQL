# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness decimal(8,7) NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL );

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

--Which tracks have a popularity of greater than 80?
SELECT track_name, popularity FROM BIT_DB.Spotifydata
WHERE popularity > 80
ORDER BY popularity ASC;

--What's the average danceability for the 10 most popular songs?
SELECT SUM(danceability/10) 
FROM BIT_DB.Spotifydata
ORDER BY popularity DESC
Limit 10;

--What is the name and length of the longest song listed?
SELECT track_name,duration_MS
FROM BIT_DB.Spotifydata
ORDER BY duration_MS DESC
Limit 1;

--What is the name and length of the shortest song listed?
SELECT track_name,duration_MS
FROM BIT_DB.Spotifydata
ORDER BY duration_MS ASC
Limit 1;

--What are the titles/artists of the top ten loudest songs in the dataset?
SELECT track_name,artist_name
FROM BIT_DB.Spotifydata
ORDER BY loudness DESC
Limit 10;
